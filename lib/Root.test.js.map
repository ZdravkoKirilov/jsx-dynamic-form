{"version":3,"sources":["../src/Root.test.js"],"names":["definition","title","confirmButtonText","fields","type","name","label","options","display","value","it","div","document","createElement","render","querySelector","expect","textContent","toEqual","button","querySelectorAll","length","cancelButtonText","text","dropdown","data","Text","Dropdown","Number","TextArea","number","textarea"],"mappings":"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","file":"Root.test.js","sourcesContent":["/**\r\n * Created by zkirilov on 24.3.2017 Ð³..\r\n */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Root from './Root';\r\n\r\nconst definition = {\r\n    title: 'Hello World',\r\n    confirmButtonText: 'Confirm',\r\n    fields: [\r\n        {\r\n            type: 'TextInput',\r\n            name: 'Text',\r\n            label: 'Hello World'\r\n        }, {\r\n            type: 'Dropdown',\r\n            name: 'Dropdown',\r\n            label: 'Hello World 2',\r\n            options: [\r\n                {\r\n                    display: 'Two',\r\n                    value: 'Dve'\r\n                }, {\r\n                    display: 'One',\r\n                    value: 'Edno'\r\n                }\r\n            ]\r\n        }, {\r\n            type: 'TextArea',\r\n            name: 'TextArea',\r\n            label: 'Desc'\r\n        }, {\r\n            type: 'NumberInput',\r\n            name: 'Number',\r\n            label: 'Enter Number'\r\n        }, {\r\n            type: 'FreeText',\r\n            name: 'Free',\r\n            label: 'Free'\r\n        }\r\n    ]\r\n};\r\n\r\nit('renders without crashing', () => {\r\n    const div = document.createElement('div');\r\n\r\n    ReactDOM.render(\r\n        <Root\r\n            definition={definition}\r\n        />, div);\r\n});\r\n\r\nit('renders correct title', () => {\r\n    const div = document.createElement('div');\r\n\r\n    ReactDOM.render(\r\n        <Root\r\n            definition={definition}\r\n        />, div);\r\n\r\n    const title = div.querySelector('.modal-title');\r\n    expect(title.textContent).toEqual(definition.title);\r\n});\r\n\r\nit('renders correct confirm button', () => {\r\n    const div = document.createElement('div');\r\n\r\n    ReactDOM.render(\r\n        <Root\r\n            definition={definition}\r\n        />, div);\r\n\r\n    const button = div.querySelectorAll('.confirm');\r\n    expect(button.length).toEqual(1);\r\n    expect(button[0].textContent).toEqual(definition.confirmButtonText);\r\n});\r\n\r\nit('should not render a cancel button if it does not appear in definition', () => {\r\n    const div = document.createElement('div');\r\n\r\n    ReactDOM.render(\r\n        <Root\r\n            definition={definition}\r\n        />, div);\r\n\r\n    const button = div.querySelectorAll('.cancel');\r\n    expect(button.length).toEqual(0);\r\n});\r\n\r\nit('should render a cancel button if it appears in definition', () => {\r\n    const div = document.createElement('div');\r\n\r\n    const definition = {\r\n        title: 'Hello World',\r\n        cancelButtonText: 'Cancel'\r\n    };\r\n\r\n    ReactDOM.render(\r\n        <Root\r\n            definition={definition}\r\n        />, div);\r\n\r\n    const button = div.querySelectorAll('.cancel');\r\n    expect(button.length).toEqual(1);\r\n    expect(button[0].textContent).toEqual(definition.cancelButtonText);\r\n});\r\n\r\nit('should render correct fields from definition', () => {\r\n    const div = document.createElement('div');\r\n\r\n    ReactDOM.render(\r\n        <Root\r\n            definition={definition}\r\n        />, div);\r\n\r\n    const text = div.querySelectorAll('.textinput');\r\n    const dropdown = div.querySelectorAll('.dropdown');\r\n\r\n    expect(text.length).toEqual(1);\r\n    expect(dropdown.length).toEqual(1);\r\n});\r\n\r\nit('should prepopulate correct data', () => {\r\n    const div = document.createElement('div');\r\n\r\n    const data = {\r\n        Text: 'Some value',\r\n        Dropdown: 'Dve',\r\n        Number: 5.55,\r\n        TextArea: 'Big text'\r\n    };\r\n\r\n    ReactDOM.render(\r\n        <Root\r\n            definition={definition}\r\n            data={data}\r\n        />, div);\r\n\r\n    const text = div.querySelector('.textinput input');\r\n    const dropdown = div.querySelector('.dropdown select');\r\n    const number = div.querySelector('.numberinput input');\r\n    const textarea = div.querySelector('.textareainput textarea');\r\n\r\n    expect(text.value).toEqual(data.Text);\r\n    expect(dropdown.value).toEqual(data.Dropdown);\r\n    expect(Number(number.value)).toEqual(data.Number);\r\n    expect(textarea.value).toEqual(data.TextArea);\r\n});\r\n\r\n\r\n"]}