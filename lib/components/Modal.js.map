{"version":3,"sources":["../../src/components/Modal.js"],"names":["Modal","props","state","data","shake","onFieldModified","bind","onConfirm","onCancel","onAnimationEnd","onDelete","fields","createFields","warnings","createWarnings","hasInvalids","style","isOpen","top","overlayStyle","height","rootClass","overlay","markup","title","confirmButtonText","cancelButtonText","deleteButtonText","self","fieldsAsComponents","map","item","index","currentValue","name","component","createComponent","type","key","label","onChange","options","required","valid","value","placeholder","length","setState","prevState","Object","assign","event","target","previousState","newState","newData","initialData","nextProps","defaultProps","propTypes","PropTypes","bool","isRequired","func","string","array"],"mappings":"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","file":"Modal.js","sourcesContent":["import React, {Component} from 'react';\nimport './Modal.css';\nimport factory from './factory';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ModalHeader from './Header';\nimport ModalFooter from './Footer';\n\nclass Modal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: {},\n            shake: false\n        };\n\n        this.onFieldModified = this\n            .onFieldModified\n            .bind(this);\n        this.onConfirm = this\n            .onConfirm\n            .bind(this);\n        this.onCancel = this\n            .onCancel\n            .bind(this);\n        this.onAnimationEnd = this\n            .onAnimationEnd\n            .bind(this);\n        this.onDelete = this\n            .onDelete\n            .bind(this);\n    };\n\n    render () {\n        const fields = this.createFields(this.props.fields);\n        const warnings = this.createWarnings(this.props.hasInvalids);\n\n        const style = this.props.isOpen\n            ? {\n                top: '20px'\n            }\n            : {\n                top: '-1000px'\n            };\n        const overlayStyle = this.props.isOpen\n            ? {\n                height: '100%'\n            }\n            : {\n                height: '0%'\n            };\n\n        const rootClass = this.state.shake === true\n            ? 'modal-root shake'\n            : 'modal-root';\n        const overlay = this.props.overlay\n            ? <div className=\"modal-overlay\" style={overlayStyle}></div>\n            : null;\n\n        const markup = <div className=\"modal-wrapper\">\n\n            {overlay}\n            <div className={rootClass} style={style} onAnimationEnd={this.onAnimationEnd}>\n\n                <ModalHeader title={this.props.title} warnings={warnings}/>\n\n                <div className=\"modal-main\">\n                    <form>\n                        {fields}\n                    </form>\n                </div>\n\n                <ModalFooter\n                    onConfirm={this.onConfirm}\n                    confirmButtonText={this.props.confirmButtonText}\n                    cancelButtonText={this.props.cancelButtonText}\n                    onCancel={this.onCancel}\n                    onDelete={this.onDelete}\n                    deleteButtonText={this.props.deleteButtonText}/>\n            </div>\n        </div>;\n\n        return markup;\n    };\n\n    /**\n     * @function createFields\n     * Dynamically creates an array of components based on provided type\n     * @param {object[]} fields\n     * @returns {object[]} React Components\n     */\n    createFields(fields) {\n        const self = this;\n        const fieldsAsComponents = fields.map(function (item, index) {\n            const currentValue = self.state.data[item.name] || '';\n\n            const component = factory.createComponent(item.type, {\n                key: index,\n                name: item.name,\n                label: item.label,\n                onChange: self.onFieldModified,\n                options: item.options,\n                required: item.required,\n                valid: item.valid,\n                value: currentValue,\n                placeholder: item.placeholder\n            });\n\n            return component;\n        });\n        return fieldsAsComponents.length\n            ? fieldsAsComponents\n            : null;\n    }\n\n    /**\n     * @function onAnimationEnd\n     * Fired after the modal stops animating /it shakes if the user tries to submit invalid data /\n     * Tells the modal to remove the css animation class\n     */\n    onAnimationEnd() {\n        this\n            .setState(function (prevState) {\n                return Object.assign({}, prevState, {shake: false});\n            });\n    }\n\n    /**\n     * @function createWarnings\n     * @param {boolean} hasInvalids\n     * @returns {object|null}\n     */\n    createWarnings(hasInvalids) {\n        return hasInvalids\n            ? <div className=\"modal-warnings\">There are errors in the form</div>\n            : null;\n    }\n\n    /**\n     * @function onFieldModified\n     * Fired each time a form input within the modal gets modified by the user / inputs, textareas, dropdowns etc /\n     * @param {object} event\n     */\n    onFieldModified(event) {\n        const name = event.target.name;\n        const value = event.target.value;\n\n        this.setState(function (previousState) {\n            const newState = Object.assign({}, previousState);\n            const newData = Object.assign({}, newState.data);\n            newData[name] = value;\n            newState.data = newData;\n            return newState;\n        }, function () {\n            if (this.props.onFieldModified) {\n                this\n                    .props\n                    .onFieldModified(this.state.data);\n            }\n        });\n    }\n\n    /**\n     * @function onConfirm\n     * Fired after the \"Confirm\" button is clicked\n     */\n    onConfirm() {\n        const hasInvalids = this\n            .props\n            .onConfirm(Object.assign({}, this.state.data));\n        if (hasInvalids) {\n            this\n                .setState(function (prevState) {\n                    return Object.assign({}, prevState, {shake: true});\n                });\n        }\n    }\n\n    /**\n     * @function onCancel\n     * Fired after the \"Cancel\" button is clicked\n     */\n    onCancel() {\n        if (this.props.onCancel) {\n            this\n                .props\n                .onCancel(Object.assign({}, this.state.data));\n        }\n    }\n\n    /**\n    * @function onDelete\n    * Fired after the \"Cancel\" button is clicked\n    */\n    onDelete() {\n        if (this.props.onDelete) {\n            this\n                .props\n                .onDelete(Object.assign({}, this.state.data));\n        }\n    }\n\n    /**\n     * @function componentWillMount\n     * It's possible that the higher order component may pass already predefined data for the modal to display\n     */\n    componentWillMount() {\n        const initialData = this.props.data\n            ? Object.assign({}, this.props.data)\n            : {};\n        this.setState(function (prevState) {\n            return Object.assign({}, prevState, {data: initialData});\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.isOpen !== this.props.isOpen) {\n            const initialData = nextProps.data\n                ? Object.assign({}, nextProps.data)\n                : {};\n            this.setState(function (prevState) {\n                return Object.assign({}, prevState, {data: initialData});\n            });\n        }\n    }\n\n    /**\n     * @function componentWillUpdate\n     * If the modal is going to be closed: reset the data which the user has entered before\n     * @param {object} nextProps\n     */\n    componentWillUpdate(nextProps) {\n        if (nextProps.isOpen === false && this.props.isOpen === true) {\n            this\n                .setState(function (previousState) {\n                    return Object.assign({}, previousState, {data: {}});\n                });\n        }\n    }\n}\n\nModal.defaultProps = {\n    isOpen: false,\n    fields: [],\n    confirmButtonText: 'Confirm'\n};\n\nModal.propTypes = {\n    isOpen: React.PropTypes.bool.isRequired,\n    onConfirm: React.PropTypes.func.isRequired,\n    title: React.PropTypes.string.isRequired,\n    onCancel: React.PropTypes.func,\n    hasInvalids: React.PropTypes.bool,\n    onFieldModified: React.PropTypes.func,\n    onAnimationEnd: React.PropTypes.func,\n    fields: React.PropTypes.array, // array of data which will be transformed into React Form Components\n    confirmButtonText: React.PropTypes.string, //what the user sees as the name of the button\n    cancelButtonText: React.PropTypes.string, //what the user sees as the name of the button\n    deleteButtonText: React.PropTypes.string,\n    onDelete: React.PropTypes.func,\n    shake: React.PropTypes.bool\n};\n\nexport default Modal;\n"]}